package com.java._02_Classes._07_Static;

import org.junit.Test;

/*
Модификатор static – определяет поле или метод, который принадлежит непосредственно КЛАССУ.
Объекты содержат в себе статические поля и методы.
Для вызова статического поля или метода не требуется создавать экземпляр класса.
Статическая переменная – это общая переменная для всех экземпляров класса, которая хранится в объекте.
Статические члены не могут быть переопределенными и абстрактными.
Статические члены поддерживают замещение.
Статические методы не могут обращаться к не статическим полям.
вызов не статического метода или поля из статического контекста запрещено и приводит к ошибке компиляции

Классы и статические классы могут иметь статические конструкторы.
• Статический конструктор(блок кода) не имеет модификаторов доступа и не принимает параметров.
• Статический конструктор(блок кода) вызывается автоматически для инициализации класса перед созданием первого экземпляра
или ссылкой на какие-либо статические члены.
• Статический блок вызывается, когда класс подгружается в память.
• Статический конструктор(блок кода) нельзя вызывать напрямую.
• Пользователь не управляет тем, когда статический конструктор(блок кода) выполняется в программе.
• Статических блоков может быть сколько угодно и вызываться они будут в том же порядке, в котором написаны.

Модификатор static

• Применяется к внутренним классам, методам, переменным и логическим блокам.
• Статические переменные инициализируются во время загрузки класса.
• Статические переменные едины для всех объектов класса (одинаковая ссылка).
• Статические методы имеют доступ только к статическим переменным.
• К статическим методам и переменным можно обращаться через имя класса.
• Статические блоки выполняются во время загрузки класса.
• Не static методы не могут быть переопределены как static.
• Локальные переменные не могут быть объявлены как static.
• Абстрактные методы не могут быть static.
• Статические поля не сериализуются (только при реализации интерфейса Serializable).
• Только static переменные класса могут быть переданы в конструктор с параметрами,
вызывающийся через слово super(//параметр//) или this(//параметр//).
 */

public class Main {

    @Test
    public void Test1Static() {

        // вызов статического метода с помощью класса
        StaticFieldsAndMethods.doSmth(); // через Класс
        StaticFieldsAndMethods an = new StaticFieldsAndMethods();
        an.doSmth();

        StaticFieldsAndMethods a = new StaticFieldsAndMethods();
        System.out.println(a.a);
        System.out.println(a.b);
        System.out.println(a.c);
        /*
        3
        4
        5
        */

        a = new StaticFieldsAndMethods(2);
        System.out.println(a.a);
        System.out.println(a.b);
        System.out.println(a.c);
        /*
        3
        4
        2
        */
    }

    @Test
    public void Test2StaticInheritance() {

        // вызов статического метода с помощью класса
        StaticFieldsAndMethods.doSmth(); // через Класс
        StaticFieldsAndMethods an = new StaticFieldsAndMethods();
        an.doSmth();

        DerivedStaticFieldsAndMethods.doSmth(); // через Класс
        DerivedStaticFieldsAndMethods an2 = new DerivedStaticFieldsAndMethods();
        an2.doSmth();

        StaticFieldsAndMethods an3 = an2;
        an3.doSmth();
        /*
        StaticFieldsAndMethods Static method
        StaticFieldsAndMethods Static method

        DerivedStaticFieldsAndMethods Static method
        DerivedStaticFieldsAndMethods Static method

        StaticFieldsAndMethods Static method
         */
    }
}
