package com.java._16_StreamAPI._01_Lambda;

/*
 Функциональный интерфейс( с 1 методом )
 Аннотация контролиует, что интерфейс является функциональным
 должен иметь один абстрактный метод но множество дефолтных и статических методов

• Отслеживает ошибки во время компиляции
• Если разработчик добавит второй абстрактный метод в
интерфейс, интерфейс не будет скомпилирован
• Описывает суть интерфейса
• Сообщает остальным разработчикам, что данный интерфейс
будет использоваться с лямбда выражениями
• Аннотация не обязательна

• java util function содержит много интерфейсов различного назначения

Например, простые интерфейсы

IntPredicate LongUnaryOperator DoubleBinaryOperator

А также обобщенные
•Predicate<T> аргумент T возвращает boolean
•Function<T,R> аргумент T возвращает R
•Consumer<T> аргумент T, ничего не возвращает void
•Supplier<T> нет аргументов, возвращает T
•BinaryOperator<T> 2 аргумента T и T, возвращает T

•Лямбда выражения могут ссылаться на переменные, которые не объявлены как final
(но значение таким переменным можно присвоить только один раз)
• Такие переменные называются эффективно финальными (их можно корректно
объявить как final
• Также можно ссылаться на изменяемые переменные экземпляра this в лямбда
выражении ссылается на главные класс (не вложенный, который создается для лямбда
выражения)

Ссылки на методы можно использовать в лямбда выражениях
Если есть метод, сигнатура которого совпадает с сигнатурой абстрактного
метода функционального интерфейса, можно использовать ссылку:
ИмяКласса::имяМетода

Класс::статМетод
переменная::методЭксземпляраКласса
Класс::методЭкземпляраКласса
Класс::new

•Метод может возвращать лямбда выражение(в действительности
объект, который реализует функциональный интерфейс)
•В интерфейсах Predicate Function Consumer есть встроенные
методы, возвращающие лямбда выражение
Predicate<Employee> isRich = e -> e.getSalary() > 200000;
Predicate<Employee> isEarly = e -> e.getEmployeeId <= 10
allMatches(employees, isRich.and(isEarly))

Методы интерфейса Predicate
• and в качестве аргумента принимает Predicate возвращает Predicate в котором метод test
возвращает true если оба исходных объекта Predicate возвращают true для заданных
аргументов. Метод по умолчанию
• or в качестве аргумента принимает Predicate возвращает Predicate в котором метод test
возвращает true если хотя бы один из исходных объектов Predicate возвращает true для
заданных аргументов. Метод по умолчанию
• negate метод без аргументов Возвращает Predicate в котором метод test возвращает
отрицание возвращаемого значения исходного объекта Predicate. Метод по умолчанию
• isEqual принимает в качестве аргумента Object возвращает Predicate в котором метод test
возвращает true если объект Predicate эквивалентен аргументу Object. Статический метод

*/

@FunctionalInterface
public interface IElectricityConsumer {

    void electricityOn(Object sender);
    //void electricityOn2(Object sender); Error second method
}
