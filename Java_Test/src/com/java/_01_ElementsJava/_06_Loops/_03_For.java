package com.java._01_ElementsJava._06_Loops;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.util.Scanner;

@RunWith(JUnit4.class)
public class _03_For {

    // Циклическая конструкция - for (цикл со счетчиком).
    @Test
    public void TstFor() {
        // for ( Инициализация счетчика итераций; Условие; Изменение счетчика ) { Тело цикла }

        for (int counter = 0; counter < 3; counter++) {
            System.out.println("Counter = " + counter);
        }

        //counter = 0; //  counter - недоступен за пределами цикла for.
    }

    // Циклическая конструкция (цикл со счетчиком) - for (с досрочным выходом из цикла - break).
    @Test
    public void TstForBreak() {
        for (int counter = 0; counter < 3; counter++) {
            System.out.println("Counter = " + counter);

            if (true) break;

            System.out.println("Эта строка не выполнится.");
        }
    }

    // Циклическая конструкция (цикл со счетчиком) - for (с пропуском итерации - continue).

    @Test
    public void TstForContinue() {
        for (int counter = 0; counter < 3; counter++) {
            System.out.println("Counter = " + counter);

            if (true) continue;

            System.out.println("Эта строка не выполнится.");
        }
    }

    // Цикл for вложенный в цикл for. ( Построение квадрата из звездочек - * )
    @Test
    public void TstInnerFor() {
        for (int i = 0; i < 10; i++) {

            // Выводим одну строку из 9 звездочек.
            for (int j = 0; j < i; j++) {
                System.out.print("*");
            }

            // Переход на новую строку.
            System.out.println();
        }
    }

    // Цикл Дейкстры.

    // При выполнении цикла Дейкстры в каждой итерации происходит вычисление охраняемых условий.
    // Если хотя бы одно из них истинно, выполняется соответствующая охраняемая команда, после чего начинается новая итерация
    // (если истинны несколько охраняемых условий, выполняется только одна охраняемая команда).
    // Если все охраняемые условия ложны, цикл завершается.
    // Цикл Дейкстры с одним охраняющим условием и одной охраняемой командой представляет собой, по сути, обычный цикл с предусловием (цикл «while»).

    // Классическое описание цикла Дейкстры.
    // do
    //   P1 ? S1,
    //     …
    //   Pn ? Sn
    // od

    // где:
    // do — маркер начала конструкции цикла,
    // od — маркер завершения конструкции цикла,
    // Pi — i-тое охраняющее условие (логическое выражение, которое может иметь значение «истинно» или «ложно»),
    // Si — i-я охраняемая команда.

    // Цикл состоит из одной или нескольких ветвей (охраняемых выражений),
    // каждая из которых представляет собой пару из охраняющего условия и охраняемой команды.

    @Test
    public void TstDijkstraLoop() {
        char character;
        Scanner in = new Scanner(System.in);

        for (; ; ) {
            character = in.next().charAt(0);

            switch (character) {
                case 'l': // 'l' - охраняющее условие 1.
                    System.out.println("Go left");    // охраняемая команда.
                    continue;

                case 'r': // 'r' - охраняющее условие 2.
                    System.out.println("Go right");   // охраняемая команда.
                    continue;
            }
            break;  // Прерывание цикла.
        }
    }

    // Цикл Паук (Spider).  Модифицированный цикл Дейкстры с явными условиями выхода.

    // Цикл Дейкстры не содержит явного условия продолжения или выхода.
    // Поэтому была предложена усложнённая конструкция цикла Дейкстры, получившая название "цикл-паук".

    // В нотации Дейкстры она выглядит следующим образом:

    // do
    //    P1?S1,
    //      …
    //    Pn?Sn
    //  out
    //    Q1?T1,
    //      …
    //    Qn?Tn
    //  else
    //    E
    // od

    // где:
    // do — маркер начала конструкции цикла,
    // od — маркер завершения конструкции цикла,
    // Pi — i-тое охраняющее условие (логическое выражение, которое может иметь значение «истинно» или «ложно»),
    // Si — i-я охраняемая команда.
    // После маркера out добавлены ветви завершения, состоящие из условий выхода Qi и команд завершения Ti.
    // Кроме того, добавлена ветвь альтернативного завершения else с командой E.

    //   Цикл-'паук' выполняется так:
    //   Вычисляются охраняющие условия.
    //   Если существует истинное охраняющее условие, выполняется соответствующая охраняемая команда.
    //   Вычисляются условия выхода.
    //   Если существует истинное условие выхода, выполняется соответствующая команда завершения,
    //   после чего выполнение цикла заканчивается.
    //   Если все условия выхода ложны, начинается следующая итерация, но только в том случае, если в текущей итерации
    //   было истинным хотя бы одно из охраняющих условий.
    //   Если в данной итерации оказались ложными и все охраняющие условия, и все условия выхода, выполняется
    //   команда альтернативного завершения E, после чего выполнение цикла прерывается.

    @Test
    public void TstSpiderLoop() {
        char character = '\0';
        Scanner in = new Scanner(System.in);
        boolean flag;

        for (; ; ) {
            character = in.next().charAt(0);

            switch (character) {
                case 'l': // 'l' - охраняющее условие 1.
                {
                    System.out.println("Go left");
                    continue; // охраняемая команда.
                }
                case 'r': // 'r' - охраняющее условие 2.
                {
                    System.out.println("Go right");
                    continue; // охраняемая команда.
                }
            }

            switch (character) {
                case 'x': // 'x' - условие выхода 1.
                {
                    System.out.println("Exit");
                    break; // команда завершения.
                }
                case 'q': // 'q' - условие выхода 2.
                {
                    System.out.println("Quit");
                    break; // команда завершения.
                }
                default: // Ветвь альтернативного завершения.
                {
                    System.out.println("Alternative exit");
                    break;
                }
            }


            break;  // Прерывание цикла.
        }
    }
}
